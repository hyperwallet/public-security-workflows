name: "DataDog"
description: Submit DataDog metrics

inputs:
    SOURCE:
      description: 'CodeQL / Dependabot' 
      required: true
      type: string
    STATUS:
      description: 'Was the run successful? success/failure/cancelled'
      required: true
      type: string
    METRIC_VALUE:
      description: 'if count, it is always 1. if guage, it is the duration of execution'
      required: true
      type: number
    METRIC_TYPE:
      description: '1 (count) or 3 (guage)'
      required: true
      type: number
    METRIC_NAME:
      description: 'pcis.ghas.run / pcis.ghas.run.duration'
      required: true
      type: string
    BU_NAME:
      description: 'The name of the Bussiness Unit'
      required: true
      type: string
    DATADOG_API_KEY:
      description: 'DATADOG API KEY'
      required: true
      type: string

runs:
  using: composite
  steps:
    - name: Submit Metric
      run: |
        export NOW="$(date +%s)"
        export HUMAN_READABLE_NOW=$(date +"%Y-%m-%d %H:%M:%S")

        curl -k -X POST "https://paypal-qa.datadoghq.com/api/v2/series" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -H "DD-API-KEY: ${DATADOG_API_KEY}" \
          -d @- << end_of_file
          {
            "series": [
              {
                "metric": "${METRIC_NAME}",
                "type": ${METRIC_TYPE},
                "points": [
                  {
                    "timestamp": ${NOW},
                    "value": ${METRIC_VALUE}
                  }
                ],
                "resources": [
                  {
                    "name": "${BU_NAME}",
                    "type": "bu"
                  },
                  {
                    "name": "${TOOL}",
                    "type": "tool"
                  },
                  {
                    "name": "${REPOSITORY}",
                    "type": "repository"
                  },
                  {
                    "name": "${STATUS}",
                    "type": "status"
                  }
                ]
              }
            ]
          }
          end_of_file
      shell: bash
      env:
        DATADOG_API_KEY: ${{ inputs.DATADOG_API_KEY }}
        METRIC_NAME: ${{ inputs.METRIC_NAME }}
        TOOL: ${{ inputs.SOURCE }}
        BU_NAME: ${{ inputs.BU_NAME }}
        STATUS: ${{ inputs.STATUS }}
        METRIC_VALUE: ${{ inputs.METRIC_VALUE }}
        METRIC_TYPE: ${{ inputs.METRIC_TYPE }}
        REPOSITORY: ${{ github.repository }}
    
    - name: Submit Event
      if: ${{ inputs.METRIC_TYPE == 3 }}
      run: |
        curl -k -X POST "https://paypal-qa.datadoghq.com/api/v1/events" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ${DATADOG_API_KEY}" \
        -d @- << end_of_file
        {
          "title": "pp.prodsec.ghas.events",
          "text": "${TOOL} ${{ ((inputs.STATUS == 'cancelled') && ' job cancelled') || ((inputs.STATUS == 'success') && ' completed successfully') || ((inputs.STATUS == 'failure') && ' job failed' || inputs.STATUS )}}: https://github.com/${REPOSITORY}/actions/runs/${RUN_ID}",
          "priority": "normal",
          "tags": [
            "duration:${DURATION}", 
            "triggering_actor:${TRIGGERING_ACTOR}", 
            "event:${EVENT_NAME}",
            "scan-tool:${TOOL}",
            "scan-type:${SCAN_TYPE}",
            "repository:${REPOSITORY}",
            "branch:${BRANCH}",
            "BU:${BU_NAME}",
            "function:scan",
            "severity:${SEVERITY}",
            "scan-detail:${RUN_ID}"
          ],
          "alert_type": "${ALERT_TYPE}",
          "source_type_name": "Github",
          "aggregation_key": "${REPOSITORY}"
        }
        end_of_file
      shell: bash
      env:
        DATADOG_API_KEY: ${{ inputs.DATADOG_API_KEY }}
        TOOL: ${{ inputs.SOURCE }}
        SCAN_TYPE: ${{ ((inputs.SOURCE == 'codeql') && 'SAST') || ((inputs.SOURCE == 'dependabot') && 'SCA') }}
        BU_NAME: ${{ inputs.BU_NAME }}
        ALERT_TYPE: ${{ ((inputs.STATUS == 'cancelled') && 'warning') || ((inputs.STATUS == 'failure') && 'error') || inputs.STATUS }}
        DURATION: ${{ inputs.METRIC_VALUE }}
        RUN_ID: ${{ github.run_id }}
        TRIGGERING_ACTOR: ${{ github.triggering_actor }}
        EVENT_NAME: ${{ github.event_name }}
        REPOSITORY: ${{ github.repository }}
        BRANCH: ${{ github.ref_name }}
        SEVERITY: ${{ ((inputs.STATUS == 'failure') && 'major') || 'minor' }}